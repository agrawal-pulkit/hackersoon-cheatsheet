<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Problem Solving on Hackersoon - Documentation</title>
    <link>https://docs.hackersoon.com/interviews/problemsolving/</link>
    <description>Recent content in Problem Solving on Hackersoon - Documentation</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 17 Dec 2019 01:06:00 +0530</lastBuildDate>
    
	<atom:link href="https://docs.hackersoon.com/interviews/problemsolving/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Sliding Window</title>
      <link>https://docs.hackersoon.com/interviews/problemsolving/sliding_window/</link>
      <pubDate>Wed, 11 Dec 2019 11:14:00 +0530</pubDate>
      
      <guid>https://docs.hackersoon.com/interviews/problemsolving/sliding_window/</guid>
      <description>.caption { text-align: center; background-color: grey; color: white; font-weight: normal; padding: 2px; text-decoration: double; } .editora { text-align: center; padding: 5px; color: blue; font-weight: bold; font-size: 20px; margin: 5px; }  open in editor   sliding window  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21  def max_sum_window_sliding(l, n, k): print(l, n, k) current_sum = 0 if n&amp;lt;k: return False for i in range(k): current_sum += l[i] print(current_sum) max_sum = current_sum for i in range(n-k): print(l[k+i],l[i]) current_sum = current_sum + l[k+i]-l[i] print(current_sum) if max_sum &amp;lt; current_sum: max_sum = current_sum return max_sum max_sum_value = max_sum_window_sliding([1, 4, 2, 10, 23, 3, 1, 0, 20], 9, 4) print(max_sum_value)    open in editor   </description>
    </item>
    
    <item>
      <title>Trapping Rain Problem</title>
      <link>https://docs.hackersoon.com/interviews/problemsolving/trapping-rain-problem/</link>
      <pubDate>Wed, 11 Dec 2019 11:14:00 +0530</pubDate>
      
      <guid>https://docs.hackersoon.com/interviews/problemsolving/trapping-rain-problem/</guid>
      <description>.caption { text-align: center; background-color: grey; color: white; font-weight: normal; padding: 2px; text-decoration: double; } .editora { text-align: center; padding: 5px; color: blue; font-weight: bold; font-size: 20px; margin: 5px; }  open in editor   Trapping Rain Problem  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32  # Python program to find maximum amount of water that can # be trapped within given set of bars.</description>
    </item>
    
  </channel>
</rss>