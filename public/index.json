[
{
	"uri": "https://docs.hackersoon.com/interviews/algorithms/graph/",
	"title": "Graph",
	"tags": [],
	"description": "",
	"content": "Graph  BellmanFord     Dijkstra     "
},
{
	"uri": "https://docs.hackersoon.com/interviews/ds/linkedlist/",
	"title": "LinkedList",
	"tags": [],
	"description": "",
	"content": "LinkedList  Positional List     "
},
{
	"uri": "https://docs.hackersoon.com/interviews/ds/queue/",
	"title": "Queue",
	"tags": [],
	"description": "",
	"content": "Queue  Circular Queue     Queue dll     Queue List     Queue LL     "
},
{
	"uri": "https://docs.hackersoon.com/interviews/algorithms/sorting/",
	"title": "Sorting",
	"tags": [],
	"description": "",
	"content": "Sorting  Heapsort     Mergesort     Quicksort     "
},
{
	"uri": "https://docs.hackersoon.com/interviews/ds/stack/",
	"title": "Stack",
	"tags": [],
	"description": "",
	"content": "Stack  Stack List     Stack LL     "
},
{
	"uri": "https://docs.hackersoon.com/interviews/algorithms/tree/",
	"title": "Tree",
	"tags": [],
	"description": "",
	"content": "Tree  AVL     BFS     Binary Tree Views     BST     DFS     "
},
{
	"uri": "https://docs.hackersoon.com/interviews/algorithms/",
	"title": "Algorithms",
	"tags": [],
	"description": "",
	"content": "Algorithms  Graph    BellmanFord   Dijkstra    Sorting    Heapsort   Mergesort   Quicksort    Tree    AVL   BFS   Binary Tree Views   BST   DFS    "
},
{
	"uri": "https://docs.hackersoon.com/programming/golang/",
	"title": "Golang",
	"tags": [],
	"description": "",
	"content": "Golang  Goroutine     "
},
{
	"uri": "https://docs.hackersoon.com/interviews/ds/",
	"title": "Data Sturctures",
	"tags": [],
	"description": "",
	"content": "Data Structure  LinkedList    Positional List    Queue    Circular Queue   Queue dll   Queue List   Queue LL    Stack    Stack List   Stack LL    "
},
{
	"uri": "https://docs.hackersoon.com/commands/",
	"title": "Commands",
	"tags": [],
	"description": "",
	"content": "Commands This Chapter is collections of command which is frequently used in Development.\n Docker     Tumx\u0026#43;iterm     Networking     Ansible     Git     Kubernetes    Helm      "
},
{
	"uri": "https://docs.hackersoon.com/interviews/problemsolving/",
	"title": "Problem Solving",
	"tags": [],
	"description": "",
	"content": "Problem Solving  Advancing through an array     Buy and Sell Stock once     Computing Alteration of an Array     Delete Duplicate from Array     Duch National Flag Problem     Sliding Window     Trapping Rain Problem     "
},
{
	"uri": "https://docs.hackersoon.com/interviews/systemdesign/",
	"title": "System Design",
	"tags": [],
	"description": "",
	"content": "System Design  "
},
{
	"uri": "https://docs.hackersoon.com/programming/",
	"title": "Programming",
	"tags": [],
	"description": "",
	"content": "Programming This chapter is collection of useful stuffs of various programming languages.\n Golang    Goroutine      "
},
{
	"uri": "https://docs.hackersoon.com/installations/mac_setup/",
	"title": "Mac_setup",
	"tags": [],
	"description": "",
	"content": "  Follow this guide to setup mac https://sourabhbajaj.com/mac-setup/\nother useful softwares brew install watch brew install httpie #kubernetes brew install kubectx brew install stern  Zsh themes themes\n"
},
{
	"uri": "https://docs.hackersoon.com/installations/",
	"title": "Installations",
	"tags": [],
	"description": "",
	"content": "Installations This chapter is collection of various installations which is used in software development.\n Mac_setup     Consul_vault    Vault Acl      Minikube     Docker     ElasticSearch     "
},
{
	"uri": "https://docs.hackersoon.com/databases/",
	"title": "Databases",
	"tags": [],
	"description": "",
	"content": "Chapter 4 Databases This Chapter is collections of databases related stuffs which is frequently used in Development.\n Mongodb    Pymongo_client      "
},
{
	"uri": "https://docs.hackersoon.com/commands/docker/",
	"title": "Docker",
	"tags": [],
	"description": "",
	"content": "  Check docker version\ndocker version  Docker container\n#get runnig and non running docker container docker ps docker ps -a # remove docker container docker rm $(docker ps -aq)  Docker images\ndocker images #delete all docker images sudo docker kill $(sudo docker ps -aq) docker rmi $(docker images -q)  Docker build\ndocker build -t {name} .  Docker run\ndocker run -it {image} -p expose_port:internal_port  Exec in Docker container\ndocker exec -it {container} /bin/sh  Docker run\ndocker run --mount type=bind,source=\u0026quot;$(pwd)\u0026quot;/data,target=/home/data -it \u0026lt;name_of_container\u0026gt;  "
},
{
	"uri": "https://docs.hackersoon.com/interviews/",
	"title": "Interview Prepartion",
	"tags": [],
	"description": "",
	"content": "System Design  Algorithms   Data Sturctures   Problem Solving   System Design   "
},
{
	"uri": "https://docs.hackersoon.com/commands/tumx+iterm/",
	"title": "Tumx+iterm",
	"tags": [],
	"description": "",
	"content": "  Tmux to use Tmux with Iterm2, you only need to provide an extra option (-CC) for Tmux commands:\n# create a new session* tmux -CC # create a new tmux session* tmux new -s \u0026lt;session-name\u0026gt; # attach to a session* tmux -CC a -t \u0026lt;session-name\u0026gt;  iterm2 best cheat sheet https://gist.github.com/squarism/ae3613daf5c01a98ba3a\ntmux cheatsheet https://devhints.io/tmux\n"
},
{
	"uri": "https://docs.hackersoon.com/commands/networking/",
	"title": "Networking",
	"tags": [],
	"description": "",
	"content": "  nc # Listener: nc -l 1234 \u0026gt; out.file # Producer: nc -w 3 \u0026lt;ip\u0026gt; 1234 \u0026lt; out.file  find which service is running and process info netstat -nltp #porcess ps -ef pas aux  change the boot disk size of instance without restart lsblk growpart /dev/sda 1 resize2fs /dev/sda1 df -h  check disk size df -h du -csh *  "
},
{
	"uri": "https://docs.hackersoon.com/showcase/",
	"title": "Examples",
	"tags": [],
	"description": "",
	"content": "some useful editing examples for this website.\n Gist Example\n   YouTube Example\n    Reference Example\n docker\n"
},
{
	"uri": "https://docs.hackersoon.com/programming/golang/goroutine/",
	"title": "Goroutine",
	"tags": [],
	"description": "",
	"content": "  This is useful for understand golang goroutines.\n"
},
{
	"uri": "https://docs.hackersoon.com/commands/ansible/",
	"title": "Ansible",
	"tags": [],
	"description": "",
	"content": "   list ansible dynamic inventory   ansible-inventory -i \u0026lt;inventory-path\u0026gt; --list  run ansible playbook   anible-playbook -i \u0026lt;inventory-path\u0026gt; \u0026lt;playbook\u0026gt;.yml -t tag --user=\u0026lt;user\u0026gt;  "
},
{
	"uri": "https://docs.hackersoon.com/commands/git/",
	"title": "Git",
	"tags": [],
	"description": "",
	"content": "  1. Squash multiple git commit into one  check how much commit you want to squash.   git log -\u0026lt;n\u0026gt;  rebase head with particular commit.   git rebase -i HEAD~\u0026lt;n\u0026gt;  change n-1 commit from pick to squash(s). save file and again add commit message. force push head branch   git push -f origin head 2. amend a new commit in last commit  amend a new changes in last commit   git commit --amend git push -u origin head 3. cherry pick  Cherry picking in Git means to choose a commit from one branch and apply it onto another.   Make sure you are on the branch you want to apply the commit to.  git checkout master Execute the following:\ngit cherry-pick \u0026lt;commit-hash\u0026gt;  "
},
{
	"uri": "https://docs.hackersoon.com/commands/kubernetes/helm/",
	"title": "Helm",
	"tags": [],
	"description": "",
	"content": "get helm charts\nhelm ls --all #get specific helm chart helm ls --all \u0026lt;name\u0026gt;  how to install a helm chart\nhelm install --name \u0026lt;name\u0026gt; \u0026lt;path-tohelm-chart\u0026gt; --namespace \u0026lt;namespace\u0026gt; #use a specific values file helm install --name \u0026lt;name\u0026gt; \u0026lt;path-tohelm-chart\u0026gt; --namespace \u0026lt;namespace\u0026gt; -f \u0026lt;path-to-yaml-file\u0026gt; #more updated helm install --name \u0026lt;name\u0026gt; \u0026lt;path-tohelm-chart\u0026gt; --namespace \u0026lt;namespace\u0026gt; --wait --timeout 1200 --set 'image.tag=latest' -f \u0026lt;path-to-yaml-file\u0026gt;  how to install a helm chart\nhelm upgrade \u0026lt;name\u0026gt; \u0026lt;path-tohelm-chart\u0026gt; --namespace \u0026lt;namespace\u0026gt;  delete a helm chart\nhelm del --purge \u0026lt;name\u0026gt;  "
},
{
	"uri": "https://docs.hackersoon.com/commands/kubernetes/",
	"title": "Kubernetes",
	"tags": [],
	"description": "",
	"content": "  Helm     alias k=kubectl  get objects\nk get pods -n \u0026lt;namespace\u0026gt; k get deployments -n \u0026lt;namespace\u0026gt; k get services -n \u0026lt;namespace\u0026gt; # example k get \u0026lt;object\u0026gt; -n \u0026lt;namespace\u0026gt; # get in all namespaces k get \u0026lt;object\u0026gt; --all-namespaces  edit kubernetes objects\nk edit \u0026lt;object\u0026gt; \u0026lt;name\u0026gt; -n \u0026lt;namespace\u0026gt;  describe kubernetes objects\nk describe \u0026lt;object\u0026gt; \u0026lt;name\u0026gt; -n \u0026lt;namespace\u0026gt;  delete object\nk delete \u0026lt;object\u0026gt; -n \u0026lt;namespace\u0026gt;  enter inside a container\nk exec -it \u0026lt;pod_name\u0026gt; -n \u0026lt;namespace\u0026gt; /bin/sh  scale a deployment\nkubectl scale deployment \u0026lt;deployment_name\u0026gt; --replicas=\u0026lt;number of replica\u0026gt; # scale all deployment with one command kubectl get deploy -n \u0026lt;namespace\u0026gt; -o name | xargs -I % kubectl scale % --replicas=1 -n services  get all pods which is running on a particular node:\nkubectl get pods --all-namespaces -o wide --field-selector spec.nodeName=\u0026lt;node-name\u0026gt;  Secrets\nk get secrets -n \u0026lt;namespace\u0026gt; # get a particular secret k get secret -n \u0026lt;namespace\u0026gt; -o yaml # copy secret value and decode it echo \u0026quot;value\u0026quot; | base64 -D  "
},
{
	"uri": "https://docs.hackersoon.com/installations/consul_vault/",
	"title": "Consul_vault",
	"tags": [],
	"description": "",
	"content": "  Vault Acl     This tutorial is to setup consul and vault in mac. Install consul using homebrew:\nbrew install consul  Install vault using homebrew:\nbrew install vault  Run consul and vault in your system:\nConsul agent — dev Vault server -dev  Consul: key/value Create a key/value in consul.\nconsul kv put test/data/key value  This command will create hierarchy test=\u0026gt;data=\u0026gt; {key: value} Get a key/value from the consul.\nconsul kv get test/data/key value  Vault: key/value Vault Authentication after installation Unseal vault using master keys these keys created for the first time. please contact an administrator for getting keys.\nvault operator unseal  Login in the vault using the root token.\nvault login  Enable key-value in vault this is for the first time enable.\nvault secrets enable -path=kv kv-v2  Create a key value in the vault.\nvault kv put kv-v2/hello key=value  output:\nKey Value --- ----- created_time 2019-07-10T07:52:26.062739464Z deletion_time n/a destroyed false version 1  get a key-value from the vault.\nvault kv get kv-v2/hello  output:\nKey Value --- ----- created_time 2019-07-10T07:52:26.062739464Z deletion_time n/a destroyed false version 1 === Data === Key Value --- ----- key value  "
},
{
	"uri": "https://docs.hackersoon.com/installations/consul_vault/vault_acl/",
	"title": "Vault Acl",
	"tags": [],
	"description": "",
	"content": "  Authenticatin Methods Different types of authentication methods:\n Internal Authentication External Authentication Multiple Authentication  Commands for create authentication methods Enable an auth method vault auth enable [method]  Write Config to an auth method vault write auth/[method]/config  Add a role to the auth method vault write auth/[method]/role/[rolename]  Disable an auth method vault auth disable [method]  Enable userpass method Add envirnmont variables export VAULT_ADDR='http://127.0.0.1:8200/' export VAULT_TOKEN=\u0026lt;token\u0026gt;  Check auth list vault auth list  Enable userpass auth method  Using vault cli   vault auth enable userpass  using curl api   cutl --header \u0026quot;x-Vault-Token: $VAULT_TOKEN\u0026quot; --request POST \\ --data '{\u0026quot;type\u0026quot;:\u0026quot;userpass\u0026quot;}' $VAULT_ADDR/v1/sys/auth/userpass Add a user to the userpass auth method create a user with password vault write auth/userpass/users/\u0026lt;username\u0026gt; password=\u0026lt;****\u0026gt;  get users from userpass methos vault list auth/userpass/users  login in vault with new userpass user credential  login in new user   vault login -method=userpass username=\u0026lt;username\u0026gt;  set vault token as new token   export VAULT_TOKEN=\u0026lt;new token\u0026gt; vault token lookup Remove account vault delete auth/username/users/\u0026lt;username\u0026gt;  Vault Policies  Wallet policies use for provide the role based access. Who, What and How? we can use hcl or json templates for writing the policy files(mostly HCL) variables for identity  Sample Plolicy document\npath \u0026quot;path_of_secret_data/[*]\u0026quot; { capabilities = [\u0026quot;create\u0026quot;, \u0026quot;read\u0026quot;, \u0026quot;update\u0026quot;, \u0026quot;list\u0026quot;, \u0026quot;delete\u0026quot;] required_parameters = [\u0026quot;param_names\u0026quot;] allowed_parameters = { param_name = [\u0026quot;any\u0026quot;] } denied_parameter = { param_name = [\u0026quot;any\u0026quot;] } }  Useful commands for vault policies list policies vault policy list  create a policy vault policy write [policy] [policy_file.hcl]  update a policy vault write sys/policy/[policy] policy=[policy_file.hcl]  delete a policy vault delete sys/policy/[policy]  Create a sample policy  create a sample policy file   cat \u0026gt; sample_policy.hcl path \u0026quot;kv-v2/*\u0026quot; { capabilities = [\u0026quot;create\u0026quot;, \u0026quot;read\u0026quot;, \u0026quot;update\u0026quot;, \u0026quot;list\u0026quot;, \u0026quot;delete\u0026quot;] } path \u0026quot;kv-v2/appId*\u0026quot; { capabilities = [\u0026quot;create\u0026quot;, \u0026quot;read\u0026quot;, \u0026quot;update\u0026quot;, \u0026quot;list\u0026quot;, \u0026quot;delete\u0026quot;] allowed_parameters = { \u0026quot;api-key\u0026quot;= [] \u0026quot;environment\u0026quot; = [\u0026quot;dev\u0026quot;, \u0026quot;staging\u0026quot;] \u0026quot;description\u0026quot; = [] } } path \u0026quot;secret/data/{{identity.entity.id}}/*\u0026quot; { capabilities = [\u0026quot;create\u0026quot;, \u0026quot;read\u0026quot;, \u0026quot;update\u0026quot;, \u0026quot;delete\u0026quot;] } path \u0026quot;secret/metadata/{{identity.entity.id}}/*\u0026quot; { capabilities = [\u0026quot;list\u0026quot;] }  run create policy command   vault policy write dev1 sample-policy.hcl  create a userpass with policy   vault write auth/userpass/users/\u0026lt;username\u0026gt; password=\u0026lt;****\u0026gt; pol  "
},
{
	"uri": "https://docs.hackersoon.com/installations/minikube/",
	"title": "Minikube",
	"tags": [],
	"description": "",
	"content": "  Minikube Installation of minikube in mac using homebrew  Install kubectl  brew install kubectl Install virtualbox  brew cask install virtualbox  Allow firewall for oracle software installation. (security \u0026amp; privacy)\n  Install minikube\n  brew cask install minikube Start minikube  minikube start  "
},
{
	"uri": "https://docs.hackersoon.com/databases/mongodb/pymongo_client/",
	"title": "Pymongo_client",
	"tags": [],
	"description": "",
	"content": "  mongo connection in python with pymongo from pymongo import MongoClient client=MongoClient('mongodb://\u0026lt;username\u0026gt;:\u0026lt;password\u0026gt;@\u0026lt;ip\u0026gt;:\u0026lt;port\u0026gt;/\u0026lt;database\u0026gt;?authSource=\u0026lt;database\u0026gt;') db=client['db_name'] db.collection_names()  "
},
{
	"uri": "https://docs.hackersoon.com/databases/mongodb/",
	"title": "Mongodb",
	"tags": [],
	"description": "",
	"content": "  Pymongo_client     "
},
{
	"uri": "https://docs.hackersoon.com/interviews/problemsolving/advancing-through-an-array/",
	"title": "Advancing through an array",
	"tags": [],
	"description": "",
	"content": ".caption { text-align: center; background-color: grey; color: white; font-weight: normal; text-decoration: double; } .editorqa { text-align: center; padding: 5px; color: blue; font-weight: bold; font-size: 20px; margin: 5px; } .run { text-align: center; background-color: #343a40; border-color: #343a40; color: #fff; font-weight: normal; width: fit-content; text-decoration: none; cursor: pointer; display: block; padding: .25rem 2.5rem; line-height: 1.5; border-radius: .2rem; box-sizing: border-box; font-size: 1rem; margin-bottom: 2px; font-weight: 400; user-select: none; text-transform: none; }   Run    Advancing through an array  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  \u0026#34;\u0026#34;\u0026#34;Advancing through an array.if A = \u0026lt;3,3,7,0,2,0,1),we iteratively compute the furthest we can advance to as 0,3,4,4,4,6,6,7, which reaches the last index, 6. lf A = (3,2,0,0,2,0,7\u0026gt;, we iteratively update the furthest we can advance to as 0,3,3,3,3, after which we cannot advance, so it is not possible to reach the last index.\u0026#34;\u0026#34;\u0026#34; def iterateArray(arr): furthest_reach_so_far, last_index = 0, len(arr) - 1 i = 0 while i \u0026lt;= furthest_reach_so_far and furthest_reach_so_far \u0026lt;= last_index: furthest_reach_so_far = max(furthest_reach_so_far, arr[i] + i) print(furthest_reach_so_far) i += 1 return furthest_reach_so_far \u0026gt;= last_index arr = [3,3,1,0,2,0,1] print(iterateArray(arr))     "
},
{
	"uri": "https://docs.hackersoon.com/interviews/algorithms/tree/avl-tree/",
	"title": "AVL",
	"tags": [],
	"description": "",
	"content": ".caption { text-align: center; background-color: grey; color: white; font-weight: normal; text-decoration: double; } .editorqa { text-align: center; padding: 5px; color: blue; font-weight: bold; font-size: 20px; margin: 5px; } .run { text-align: center; background-color: #343a40; border-color: #343a40; color: #fff; font-weight: normal; width: fit-content; text-decoration: none; cursor: pointer; display: block; padding: .25rem 2.5rem; line-height: 1.5; border-radius: .2rem; box-sizing: border-box; font-size: 1rem; margin-bottom: 2px; font-weight: 400; user-select: none; text-transform: none; }   Run    AVL Treeclass Node: def __init__(self, data): self.data = data self.height = 0 self.leftChild = None self.rightChild = None class AVL: def __init__(self): self.root = None def calcHeight(self, node): if not node: return -1 return node.height def calcBalance(self, node): if not node: return 0 return self.calcHeight(node.leftChild) -self.calcHeight(node.rightChild) def insert(self, data): self.root = self.insertNode(data, self.root) def insertNode(self, data, node): if not node: return Node(data) if data\u0026lt;node.data: node.leftChild = self.insertNode(data, node.leftChild) else: node.rightChild = self.insertNode(data, node.rightChild) node.height = max(self.calcHeight(node.leftChild), self.calcHeight(node.rightChild)) + 1 return self.settleViolations(data, node) def settleViolations(self, data, node): balance = self.calcBalance(node) print(\u0026#34;balance: \u0026#34;, balance) if balance \u0026gt; 1 and data \u0026lt; node.leftChild.data: print(\u0026#34;Left Left heavy situation.\u0026#34;) return self.rotateRight(node) if balance \u0026lt; -1 and data \u0026gt; node.rightChild.data: print(\u0026#34;Right Right heavy situation.\u0026#34;) return self.rotateLeft(node) if balance \u0026gt; 1 and data \u0026gt; node.leftChild.data: print(\u0026#34;Left Right Heavy situation.\u0026#34;) node.leftChild = self.rotateLeft(node.leftChild) return self.rotateRight(node) if balance \u0026lt; -1 and data \u0026lt; node.rightChild.data: print(\u0026#34;Right Left Heavy situation.\u0026#34;) node.rightChild = self.rotateRight(node.rightChild) return self.rotateLeft(node) return node def removeNode(self, data, node): if not node: return node if data \u0026lt; node.data: node.leftNode = self.removeNode(data, node.leftNode) elif data \u0026gt; node.data: node.rightNode = self.removeNode(data, node.rightNode) else: if not node.leftNode and not node.rightNode: print(\u0026#34;removing a leaf node.\u0026#34;) del node return None elif not node.leftNode: print(\u0026#34;removing a node with single right child.\u0026#34;) tempNode = node.rightNode del node return tempNode elif not node.rightNode: print(\u0026#34;removing a node with single left child.\u0026#34;) tempNode = node.leftNode del node return tempNode print(\u0026#34;removing a node with two children.\u0026#34;) predeccorNode = self.getPredeccorNode(node.leftNode) node.data = predeccorNode.data node.leftNode = self.removeNode(predeccorNode.data, node.leftNode) if not node: return node node.height = max(self.calcHeight(node.leftChild), self.calcHeight(node.rightChild)) + 1 balance = self.calcBalance(node) if balance \u0026gt; 1 and self.calcBalance(node.leftChild)\u0026gt;=0: print(\u0026#34;Left Left heavy situation.\u0026#34;) return self.rotateRight(node) if balance \u0026lt; -1 and self.calcBalance(node.rightChild)\u0026lt;=0: print(\u0026#34;Right Right heavy situation.\u0026#34;) return self.rotateLeft(node) if balance \u0026gt; 1 and self.calcBalance(node.leftChild)\u0026lt;0: print(\u0026#34;Left Right Heavy situation.\u0026#34;) node.leftChild = self.rotateLeft(node.leftChild) return self.rotateRight(node) if balance \u0026lt; -1 and self.calcBalance(node.rightChild)\u0026gt;0: print(\u0026#34;Right Left Heavy situation.\u0026#34;) node.rightChild = self.rotateRight(node.rightChild) return self.rotateLeft(node) return node def getPredeccorNode(self, node): if node.rightNode: return self.getPredeccorNode(node.rightNode) return node def rotateRight(self, node): tempLeftNode = node.leftChild t = tempLeftNode.rightChild tempLeftNode.rightChild = node node.leftChild = t node.height = max(self.calcHeight(node.leftChild), self.calcHeight(node.rightChild)) + 1 tempLeftNode.height = max(self.calcHeight(tempLeftNode.leftChild), self.calcHeight(tempLeftNode.rightChild)) + 1 return tempLeftNode def rotateLeft(self, node): tempRightNode = node.rightChild t = tempRightNode.leftChild tempRightNode.leftChild = node node.rightChild = t node.height = max(self.calcHeight(node.leftChild), self.calcHeight(node.rightChild)) + 1 tempRightNode.height = max(self.calcHeight(tempRightNode.leftChild), self.calcHeight(tempRightNode.rightChild)) + 1 return tempRightNode def traverse(self): if self.root: self.traverseInOrder(self.root) def traverseInOrder(self, node): if node.leftChild: self.traverseInOrder(node.leftChild) print(node.data) if node.rightChild: self.traverseInOrder(node.rightChild)     "
},
{
	"uri": "https://docs.hackersoon.com/interviews/algorithms/graph/bellmanford/",
	"title": "BellmanFord",
	"tags": [],
	"description": "",
	"content": ".caption { text-align: center; background-color: grey; color: white; font-weight: normal; text-decoration: double; } .editorqa { text-align: center; padding: 5px; color: blue; font-weight: bold; font-size: 20px; margin: 5px; } .run { text-align: center; background-color: #343a40; border-color: #343a40; color: #fff; font-weight: normal; width: fit-content; text-decoration: none; cursor: pointer; display: block; padding: .25rem 2.5rem; line-height: 1.5; border-radius: .2rem; box-sizing: border-box; font-size: 1rem; margin-bottom: 2px; font-weight: 400; user-select: none; text-transform: none; }   Run    Bellman Ford  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124  import sys class Vertex: def __init__(self, name): self.name = name self.adjacenciesList = [] self.visited = False self.predecessor = None self.minDistance = sys.maxsize class Edge: def __init__(self, weight, startVertex, targetVertex): self.weight = weight self.startVertex = startVertex self.targetVertex = targetVertex class BellmanFord: HAS_CYCLE = False def calcShortestPath(self, vertexList, edgeList, startVertex): startVertex.minDistance = 0 for _ in range(0,len(vertexList)-1): for edge in edgeList: u = edge.startVertex v = edge.targetVertex newDistance = u.minDistance + edge.weight if newDistance \u0026lt; v.minDistance: v.minDistance = newDistance v.predecessor = u for edge in edgeList: if self.hasCycle(edge): print(\u0026#34;Grape has nagetive cycle.\u0026#34;) BellmanFord.HAS_CYCLE = True return def hasCycle(self, edge): if (edge.startVertex.minDistance + edge.weight) \u0026lt; edge.targetVertex.minDistance: return True else: return False def getShortestPathTo(self, targetVertex): if not BellmanFord.HAS_CYCLE: print(\u0026#34;shorest distance: {}\u0026#34;.format(targetVertex.minDistance)) node = targetVertex while node is not None: print(node.name) node = node.predecessor else: print(\u0026#34;negative cycle in graph\u0026#34;) node1 = Vertex(\u0026#34;A\u0026#34;); node2 = Vertex(\u0026#34;B\u0026#34;); node3 = Vertex(\u0026#34;C\u0026#34;); node4 = Vertex(\u0026#34;D\u0026#34;); node5 = Vertex(\u0026#34;E\u0026#34;); node6 = Vertex(\u0026#34;F\u0026#34;); node7 = Vertex(\u0026#34;G\u0026#34;); node8 = Vertex(\u0026#34;H\u0026#34;); edge1 = Edge(5, node1, node2); edge2 = Edge(8, node1, node8); edge3 = Edge(9, node1, node5); edge4 = Edge(15, node2, node4); edge5 = Edge(12, node2, node3); edge6 = Edge(4, node2, node8); edge7 = Edge(7, node8, node3); edge8 = Edge(6, node8, node6); edge9 = Edge(5, node5, node8); edge10 = Edge(4, node5, node6); edge11 = Edge(20, node5, node7); edge12 = Edge(1, node6, node3); edge13 = Edge(13, node6, node7); edge14 = Edge(3, node3, node4); edge15 = Edge(11, node3, node7); edge16 = Edge(9, node4, node7); edge17 = Edge(1, node1, node2); edge18 = Edge(1, node2, node3); edge19 = Edge(-3, node3, node1); node1.adjacenciesList.append(edge1); node1.adjacenciesList.append(edge2); node1.adjacenciesList.append(edge3); node2.adjacenciesList.append(edge4); node2.adjacenciesList.append(edge5); node2.adjacenciesList.append(edge6); node8.adjacenciesList.append(edge7); node8.adjacenciesList.append(edge8); node5.adjacenciesList.append(edge9); node5.adjacenciesList.append(edge10); node5.adjacenciesList.append(edge11); node6.adjacenciesList.append(edge12); node6.adjacenciesList.append(edge13); node3.adjacenciesList.append(edge14); node3.adjacenciesList.append(edge15); node4.adjacenciesList.append(edge16); vertexList = (node1, node2, node3, node4, node5, node6, node7, node8); edgeList = (edge1,edge2,edge3,edge4,edge5,edge6,edge7,edge8,edge9,edge10,edge11,edge12,edge13,edge14,edge15,edge16); #edgeList = (edge17, edge18, edge19); algorithm = BellmanFord(); algorithm.calcShortestPath(vertexList, edgeList, node1); algorithm.getShortestPathTo(node7);     "
},
{
	"uri": "https://docs.hackersoon.com/interviews/algorithms/tree/bfs/",
	"title": "BFS",
	"tags": [],
	"description": "",
	"content": ".caption { text-align: center; background-color: grey; color: white; font-weight: normal; text-decoration: double; } .editorqa { text-align: center; padding: 5px; color: blue; font-weight: bold; font-size: 20px; margin: 5px; } .run { text-align: center; background-color: #343a40; border-color: #343a40; color: #fff; font-weight: normal; width: fit-content; text-decoration: none; cursor: pointer; display: block; padding: .25rem 2.5rem; line-height: 1.5; border-radius: .2rem; box-sizing: border-box; font-size: 1rem; margin-bottom: 2px; font-weight: 400; user-select: none; text-transform: none; }   Run    Breadth First Search  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40  class Node: def __init__(self, name): self.name = name self.adjacencyList = [] self.visited = False self.predecessor = None class BFS: def bfs(self, startNode): queue = [] startNode.visited = True queue.append(startNode) while queue: actualNode = queue.pop(0) print(actualNode.name) for n in actualNode.adjacencyList: if not n.visited: n.visited = True queue.append(n) node1 = Node(\u0026#39;A\u0026#39;) node2 = Node(\u0026#39;B\u0026#39;) node3 = Node(\u0026#39;C\u0026#39;) node4 = Node(\u0026#39;D\u0026#39;) node5 = Node(\u0026#39;E\u0026#39;) node1.adjacencyList.append(node2) node1.adjacencyList.append(node3) node2.adjacencyList.append(node4) node3.adjacencyList.append(node5) bfs = BFS() bfs.bfs(node1)     "
},
{
	"uri": "https://docs.hackersoon.com/interviews/algorithms/tree/binary-tree-view/",
	"title": "Binary Tree Views",
	"tags": [],
	"description": "",
	"content": ".caption { text-align: center; background-color: grey; color: white; font-weight: normal; text-decoration: double; } .editorqa { text-align: center; padding: 5px; color: blue; font-weight: bold; font-size: 20px; margin: 5px; } .run { text-align: center; background-color: #343a40; border-color: #343a40; color: #fff; font-weight: normal; width: fit-content; text-decoration: none; cursor: pointer; display: block; padding: .25rem 2.5rem; line-height: 1.5; border-radius: .2rem; box-sizing: border-box; font-size: 1rem; margin-bottom: 2px; font-weight: 400; user-select: none; text-transform: none; }   Run    Binary Tree Views  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70  class Node: def __init__(self, data): self.data = data self.leftChild = None self.rightChild = None class BinaryTree: def __init__(self): self.root = None def printMirrorView(self, node): q = [] q.append(node) while q: node = q.pop(0) node.leftChild, node.rightChild = node.rightChild, node.leftChild if node.leftChild: q.append(node.leftChild) if node.rightChild: q.append(node.rightChild) def leftView(self, node): if not node: return while node is not None: print(node.data) if node.leftChild: node = node.leftChild else: node = node.rightChild def traverseInOrder(self, node): if not node: return self.traverseInOrder(node.leftChild) print(node.data) self.traverseInOrder(node.rightChild) def createTree(): bt = BinaryTree() bt.root = Node(1) bt.root.leftChild = Node(2) bt.root.rightChild = Node(3) bt.root.leftChild.leftChild = Node(4) bt.root.leftChild.rightChild = Node(5) bt.root.leftChild.leftChild.leftChild = Node(6) return bt if __name__ == \u0026#34;__main__\u0026#34;: # bt = createTree() # bt.traverseInOrder(bt.root) # bt.printMirrorView(bt.root) # bt.traverseInOrder(bt.root) bt1 = createTree() #bt1.traverseInOrder(bt1.root) bt1.leftView(bt1.root) #bt1.traverseInOrder(bt1.root)     "
},
{
	"uri": "https://docs.hackersoon.com/interviews/algorithms/tree/binary-search-tree/",
	"title": "BST",
	"tags": [],
	"description": "",
	"content": ".caption { text-align: center; background-color: grey; color: white; font-weight: normal; text-decoration: double; } .editorqa { text-align: center; padding: 5px; color: blue; font-weight: bold; font-size: 20px; margin: 5px; } .run { text-align: center; background-color: #343a40; border-color: #343a40; color: #fff; font-weight: normal; width: fit-content; text-decoration: none; cursor: pointer; display: block; padding: .25rem 2.5rem; line-height: 1.5; border-radius: .2rem; box-sizing: border-box; font-size: 1rem; margin-bottom: 2px; font-weight: 400; user-select: none; text-transform: none; }   Run    Binary Search Tree  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122  \u0026#34;\u0026#34;\u0026#34;Implementation of Binary Search Tree\u0026#34;\u0026#34;\u0026#34; class Node: def __init__(self, data): self.data = data self.leftNode = None self.rightNode = None class BST: def __init__(self): self.root = None def insert(self, data): if not self.root: self.root = Node(data) else: self.insertNode(data, self.root) def insertNode(self, data, node): if data \u0026lt; node.data: if node.leftNode: self.insertNode(data, node.leftNode) else: node.leftNode = Node(data) else: if node.rightNode: self.insertNode(data, node.rightNode) else: node.rightNode = Node(data) def remove(self, data): if self.root: self.removeNode(data, self.root) def removeNode(self, data, node): if not node: return node if data \u0026lt; node.data: node.leftNode = self.removeNode(data, node.leftNode) elif data \u0026gt; node.data: node.rightNode = self.removeNode(data, node.rightNode) else: if not node.leftNode and not node.rightNode: print(\u0026#34;removing a leaf node.\u0026#34;) del node return None elif not node.leftNode: print(\u0026#34;removing a node with single right child.\u0026#34;) tempNode = node.rightNode del node return tempNode elif not node.rightNode: print(\u0026#34;removing a node with single left child.\u0026#34;) tempNode = node.leftNode del node return tempNode print(\u0026#34;removing a node with two children.\u0026#34;) predeccorNode = self.getPredeccorNode(node.leftNode) node.data = predeccorNode.data node.leftNode = self.removeNode(predeccorNode.data, node.leftNode) return node def getPredeccorNode(self, node): if node.rightNode: return self.getPredeccorNode(node.rightNode) return node def getMinValue(self): if self.root: return self.getMin(self.root) else: return \u0026#34;empty tree\u0026#34; def getMin(self, node): if node.leftNode: return self.getMin(node.leftNode) return node.data def getMaxValue(self): if self.root: return self.getMax(self.root) else: return \u0026#34;empty tree\u0026#34; def getMax(self, node): if node.rightNode: return self.getMax(node.rightNode) return node.data def traverse(self): if self.root: self.traverseInOrder(self.root) def traverseInOrder(self, node): if node.leftNode: self.traverseInOrder(node.leftNode) print(node.data) if node.rightNode: self.traverseInOrder(node.rightNode) bst = BST() bst.insert(10) bst.insert(5) bst.insert(15) bst.insert(6) bst.traverse() bst.remove(6) bst.traverse()     "
},
{
	"uri": "https://docs.hackersoon.com/interviews/problemsolving/buy-and-sell-stock-once/",
	"title": "Buy and Sell Stock once",
	"tags": [],
	"description": "",
	"content": ".caption { text-align: center; background-color: grey; color: white; font-weight: normal; text-decoration: double; } .editorqa { text-align: center; padding: 5px; color: blue; font-weight: bold; font-size: 20px; margin: 5px; } .run { text-align: center; background-color: #343a40; border-color: #343a40; color: #fff; font-weight: normal; width: fit-content; text-decoration: none; cursor: pointer; display: block; padding: .25rem 2.5rem; line-height: 1.5; border-radius: .2rem; box-sizing: border-box; font-size: 1rem; margin-bottom: 2px; font-weight: 400; user-select: none; text-transform: none; }   Run    Buy and Sell Stock once  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53  \u0026#34;\u0026#34;\u0026#34;This problem is concerned with the problem of optimally buying and selling a stock once, as described on Page 2. As an example, consider the following sequence of stock prices:The maximum profit that can be made with one buy and one sell is 30-buy at 260 and sell at 290. Note that 250 is not the lowest price, nor 290 the\u0026lt;31.0,31.5,275,295,260,270,290,230,255,250\u0026gt;.highest price.This solution is based on two assumption.1. max profit 2. min price so far \u0026#34;\u0026#34;\u0026#34; def buy_and_sell_stock_once(arr): max_profit, min_price_so_far = 0, float(\u0026#39;inf\u0026#39;) for price in arr: max_profit_sell_today = price - min_price_so_far max_profit = max(max_profit, max_profit_sell_today) min_price_so_far = min(min_price_so_far, price) return max_profit arr = [310, 315, 275, 295, 260, 270, 290, 230, 255, 250] result = buy_and_sell_stock_once(arr) print(\u0026#34;result: \u0026#34;, result) \u0026#34;\u0026#34;\u0026#34;We can also solve this problem using maximum sum sub-array method.which is an example of kadane\u0026#39;s algorithm.Largest Sum Contiguous Subarray.\u0026#34;\u0026#34;\u0026#34; def kadanes_algo(arr): max_so_far, max_ending_here = 0, 0 for i in range(len(arr)): max_ending_here += arr[i] if max_ending_here \u0026lt; 0: max_ending_here = 0 elif max_so_far \u0026lt; max_ending_here: max_so_far = max_ending_here return max_so_far def buy_and_sell_stock(arr): for i in range(len(arr)-1): arr[i] = arr[i+1] - arr[i] max_profit = kadanes_algo(arr[:-1]) return max_profit arr = [310, 315, 275, 295, 260, 270, 290, 230, 255, 250] result = buy_and_sell_stock(arr) print(\u0026#34;using kadane\u0026#39;s Algo result: \u0026#34;, result)     "
},
{
	"uri": "https://docs.hackersoon.com/interviews/ds/queue/queue_circular/",
	"title": "Circular Queue",
	"tags": [],
	"description": "",
	"content": ".caption { text-align: center; background-color: grey; color: white; font-weight: normal; text-decoration: double; } .editorqa { text-align: center; padding: 5px; color: blue; font-weight: bold; font-size: 20px; margin: 5px; } .run { text-align: center; background-color: #343a40; border-color: #343a40; color: #fff; font-weight: normal; width: fit-content; text-decoration: none; cursor: pointer; display: block; padding: .25rem 2.5rem; line-height: 1.5; border-radius: .2rem; box-sizing: border-box; font-size: 1rem; margin-bottom: 2px; font-weight: 400; user-select: none; text-transform: none; }   Run    Circular Queue  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50  class Empty(Exception): pass class CircularQueue: class _Node: def __init__(self, element, next): self._element = element self._next = next def __init__(self): self._tail = None self._size = 0 def __len__(self): return self._size def isEmpty(self): return self._size == 0 def first(self): if self.isEmpty(): raise Empty(\u0026#34;queue is empty.\u0026#34;) return self._tail._next._element def enqueue(self, value): node = self._Node(value, None) if self.isEmpty(): node._next = node else: node._next = self._tail._next self._tail._next = node self._tail = node self._size += 1 def dequeue(self): if self.isEmpty(): raise Empty(\u0026#34;queue is empty.\u0026#34;) ans = self._tail._next if self._size == 1: self._tail = None else: self._tail = self.ans._next self._size -= 1 return ans._element def rotate(self): if self._size \u0026gt; 0: self._tail._next = self._tail     "
},
{
	"uri": "https://docs.hackersoon.com/interviews/problemsolving/computing-alteration-of-array/",
	"title": "Computing Alteration of an Array",
	"tags": [],
	"description": "",
	"content": ".caption { text-align: center; background-color: grey; color: white; font-weight: normal; text-decoration: double; } .editorqa { text-align: center; padding: 5px; color: blue; font-weight: bold; font-size: 20px; margin: 5px; } .run { text-align: center; background-color: #343a40; border-color: #343a40; color: #fff; font-weight: normal; width: fit-content; text-decoration: none; cursor: pointer; display: block; padding: .25rem 2.5rem; line-height: 1.5; border-radius: .2rem; box-sizing: border-box; font-size: 1rem; margin-bottom: 2px; font-weight: 400; user-select: none; text-transform: none; }   Run    Computing Alteration of an Array  1 2 3 4 5 6 7 8 9 10 11 12 13 14  \u0026#34;\u0026#34;\u0026#34;Write a program that takes an array A of n numbers, and rearranges A\u0026#39;s elements to get a new array BhavingthepropertythatB[0] \u0026lt; B[1] \u0026gt;Bl2) \u0026lt; B[3] \u0026gt;8141\u0026lt; B[5] \u0026gt;....you may notice that the desired ordering is very local, and realize that it is not necessary to find the median. Iterating through the array and swapping A[i] and AU + 1l when i is even andAlil \u0026gt; Ali + 1l or I is odd and A[4 \u0026lt; Ali + 1] achieves the desired configuration. In code:\u0026#34;\u0026#34;\u0026#34; def rearrange(arr): for i in range(len(arr)): arr[i:i+2] = sorted(arr[i:i+2], reverse=i%2) return arr arr = [2, 3, 4, 5, 6, 2, 3, 4] result = rearrange(arr) print(\u0026#34;result: \u0026#34;, result)     "
},
{
	"uri": "https://docs.hackersoon.com/interviews/problemsolving/deletion-duplicate-in-array/",
	"title": "Delete Duplicate from Array",
	"tags": [],
	"description": "",
	"content": ".caption { text-align: center; background-color: grey; color: white; font-weight: normal; text-decoration: double; } .editorqa { text-align: center; padding: 5px; color: blue; font-weight: bold; font-size: 20px; margin: 5px; } .run { text-align: center; background-color: #343a40; border-color: #343a40; color: #fff; font-weight: normal; width: fit-content; text-decoration: none; cursor: pointer; display: block; padding: .25rem 2.5rem; line-height: 1.5; border-radius: .2rem; box-sizing: border-box; font-size: 1rem; margin-bottom: 2px; font-weight: 400; user-select: none; text-transform: none; }   Run    Delete Duplicate from Array  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19  \u0026#34;\u0026#34;\u0026#34;Delete Duplicate from a sorted array.And return number of duplicate entries after deletion.This problem is concemed with deleting repeated elements from a sorted array. For example, for the array \u0026lt;2,3,5,5,7,1.1.,L1.,77,73\u0026gt;, then after deletion, the array is (2,3,5,7,77,73,0,0,0). After deleting repeated elements, there are 6 valid entries. There are no requirements as to the values stored beyond the last valid element.\u0026#34;\u0026#34;\u0026#34; def delete_duplicate(arr): if len(arr) == 0: return write_index = 1 for i in range(len(arr)): if arr[write_index-1] != arr[i]: arr[write_index] = arr[i] write_index += 1 return arr[:write_index] arr = [2,3,5,5,7,11,11,11,13] result = delete_duplicate(arr) print(\u0026#34;result: \u0026#34;, result)     "
},
{
	"uri": "https://docs.hackersoon.com/interviews/algorithms/tree/dfs/",
	"title": "DFS",
	"tags": [],
	"description": "",
	"content": ".caption { text-align: center; background-color: grey; color: white; font-weight: normal; text-decoration: double; } .editorqa { text-align: center; padding: 5px; color: blue; font-weight: bold; font-size: 20px; margin: 5px; } .run { text-align: center; background-color: #343a40; border-color: #343a40; color: #fff; font-weight: normal; width: fit-content; text-decoration: none; cursor: pointer; display: block; padding: .25rem 2.5rem; line-height: 1.5; border-radius: .2rem; box-sizing: border-box; font-size: 1rem; margin-bottom: 2px; font-weight: 400; user-select: none; text-transform: none; }   Run    Deapth First Search  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56  \u0026#34;\u0026#34;\u0026#34;initiaze a tree node\u0026#34;\u0026#34;\u0026#34; class Node: def __init__(self, name): self.name = name self.adjacencyList = [] self.visited = False self.predecessor = None class DFS: def dfsByRecursion(self, startNode): startNode.visited = True print(startNode.name) for n in startNode.adjacencyList: n.visited = True self.dfsByRecursion(n) def dfsByStack(self, startNode): stack = [] startNode.visited = True stack.append(startNode) while stack: actualNode = stack.pop() print(actualNode.name) for n in actualNode.adjacencyList: if not n.visited: n.visited = True stack.append(n) # sample input node1 = Node(\u0026#39;A\u0026#39;) node2 = Node(\u0026#39;B\u0026#39;) node3 = Node(\u0026#39;C\u0026#39;) node4 = Node(\u0026#39;D\u0026#39;) node5 = Node(\u0026#39;E\u0026#39;) node1.adjacencyList.append(node2) node1.adjacencyList.append(node3) node2.adjacencyList.append(node4) node3.adjacencyList.append(node5) dfs = DFS() dfs.dfsByStack(node1) dfs.dfsByRecursion(node1)     "
},
{
	"uri": "https://docs.hackersoon.com/interviews/algorithms/graph/dijkstra/",
	"title": "Dijkstra",
	"tags": [],
	"description": "",
	"content": ".caption { text-align: center; background-color: grey; color: white; font-weight: normal; text-decoration: double; } .editorqa { text-align: center; padding: 5px; color: blue; font-weight: bold; font-size: 20px; margin: 5px; } .run { text-align: center; background-color: #343a40; border-color: #343a40; color: #fff; font-weight: normal; width: fit-content; text-decoration: none; cursor: pointer; display: block; padding: .25rem 2.5rem; line-height: 1.5; border-radius: .2rem; box-sizing: border-box; font-size: 1rem; margin-bottom: 2px; font-weight: 400; user-select: none; text-transform: none; }   Run    Dijkstra  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109  import sys import heapq class Edge: def __init__(self, weight, startVertex, targetVertex): self.weight = weight self.startVertex = startVertex self.targetVertex = targetVertex class Vertex: def __init__(self, name): self.name = name self.adjacenciesList = [] self.visited = False self.predecessor = None self.minDistance = sys.maxsize def __cmp__(self, otherVertex): return self.cmp(self.minDistance, otherVertex.minDistance) def __lt__(self, otherVertex): return self.minDistance \u0026lt; otherVertex.minDistance class Dijkstra: def calculateShortestPath(self, vertexList, startVertex): q = [] startVertex.minDistance = 0 heapq.heappush(q, startVertex) while q: actualVertex = heapq.heappop(q) for edge in actualVertex.adjacenciesList: u = edge.startVertex v = edge.targetVertex newDistance = u.minDistance + edge.weight if newDistance \u0026lt; v.minDistance: v.predecessor = u v.minDistance = newDistance heapq.heappush(q, v) def getShortestPathTo(self, targetVertex): print(\u0026#34;minDistance: {}\u0026#34;.format(targetVertex.minDistance)) node = targetVertex while node is not None: print(node.name) node = node.predecessor node1 = Vertex(\u0026#34;A\u0026#34;); node2 = Vertex(\u0026#34;B\u0026#34;); node3 = Vertex(\u0026#34;C\u0026#34;); node4 = Vertex(\u0026#34;D\u0026#34;); node5 = Vertex(\u0026#34;E\u0026#34;); node6 = Vertex(\u0026#34;F\u0026#34;); node7 = Vertex(\u0026#34;G\u0026#34;); node8 = Vertex(\u0026#34;H\u0026#34;); edge1 = Edge(5,node1,node2); edge2 = Edge(8,node1,node8); edge3 = Edge(9,node1,node5); edge4 = Edge(15,node2,node4); edge5 = Edge(12,node2,node3); edge6 = Edge(4,node2,node8); edge7 = Edge(7,node8,node3); edge8 = Edge(6,node8,node6); edge9 = Edge(5,node5,node8); edge10 = Edge(4,node5,node6); edge11 = Edge(20,node5,node7); edge12 = Edge(1,node6,node3); edge13 = Edge(13,node6,node7); edge14 = Edge(3,node3,node4); edge15 = Edge(11,node3,node7); edge16 = Edge(9,node4,node7); node1.adjacenciesList.append(edge1); node1.adjacenciesList.append(edge2); node1.adjacenciesList.append(edge3); node2.adjacenciesList.append(edge4); node2.adjacenciesList.append(edge5); node2.adjacenciesList.append(edge6); node8.adjacenciesList.append(edge7); node8.adjacenciesList.append(edge8); node5.adjacenciesList.append(edge9); node5.adjacenciesList.append(edge10); node5.adjacenciesList.append(edge11); node6.adjacenciesList.append(edge12); node6.adjacenciesList.append(edge13); node3.adjacenciesList.append(edge14); node3.adjacenciesList.append(edge15); node4.adjacenciesList.append(edge16); vertexList = (node1,node2,node3, node4, node5, node6, node7, node8); algorithm = Dijkstra(); algorithm.calculateShortestPath(vertexList, node1); algorithm.getShortestPathTo(node4);     "
},
{
	"uri": "https://docs.hackersoon.com/installations/docker/",
	"title": "Docker",
	"tags": [],
	"description": "",
	"content": "  Docker installation in MAC: brew install docker  "
},
{
	"uri": "https://docs.hackersoon.com/interviews/problemsolving/duch-nationl-flag-problem/",
	"title": "Duch National Flag Problem",
	"tags": [],
	"description": "",
	"content": ".caption { text-align: center; background-color: grey; color: white; font-weight: normal; text-decoration: double; } .editorqa { text-align: center; padding: 5px; color: blue; font-weight: bold; font-size: 20px; margin: 5px; } .run { text-align: center; background-color: #343a40; border-color: #343a40; color: #fff; font-weight: normal; width: fit-content; text-decoration: none; cursor: pointer; display: block; padding: .25rem 2.5rem; line-height: 1.5; border-radius: .2rem; box-sizing: border-box; font-size: 1rem; margin-bottom: 2px; font-weight: 400; user-select: none; text-transform: none; }   Run    Duch National Flag Problem  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31  \u0026#34;\u0026#34;\u0026#34;Rearragement of numbers based on pivot number.suppose A = (0,1.,2,0,2,1,L), and the pivot index is 3. Then A[3] = 0, so \u0026lt;0,0,7,2,2,L,1) is a valid partitioning. For the same array, if the pivot index is 2, then Al2l = 2, the arrays \u0026lt;0,7,0,1,1,2,2\u0026gt; as well as (0,0, 7,1,,\u0026#39;1,,2,2\u0026gt; are valid partitionings.\u0026#34;\u0026#34;\u0026#34; def rearragement(arr, pivot): s, e, l = 0, 0, len(arr) while e \u0026lt; l: if arr[e] \u0026lt; pivot: arr[e], arr[s] = arr[s], arr[e] s += 1 e += 1 elif arr[e] == pivot: e += 1 else: l -= 1 arr[l], arr[e] = arr[e], arr[l] return arr arr = [2, 4, 0, 1, 2, 0, 2, 1, -1] pivot = 1 print(\u0026#34;input: \u0026#34;, arr, pivot) result = rearragement(arr, pivot) print(\u0026#34;output: \u0026#34;, result)     "
},
{
	"uri": "https://docs.hackersoon.com/installations/elasticsearch/",
	"title": "ElasticSearch",
	"tags": [],
	"description": "",
	"content": "  Elasticsearch installation in Ubuntu: apt-get update apt-get install python-minimal apt-get install openjdk-8-jdk wget https://download.elastic.co/elasticsearch/release/org/elasticsearch/distribution/deb/elasticsearch/2.4.0/elasticsearch-2.4.0.deb dpkg -i elasticsearch-2.4.0.deb cd /etc/elasticsearch vim elasticsearch.yml update network.host with private ip of the server service elasticsearch start service elasticsearch status curl ip:9200/ "
},
{
	"uri": "https://docs.hackersoon.com/interviews/algorithms/sorting/heapsort/",
	"title": "Heapsort",
	"tags": [],
	"description": "",
	"content": ".caption { text-align: center; background-color: grey; color: white; font-weight: normal; text-decoration: double; } .editorqa { text-align: center; padding: 5px; color: blue; font-weight: bold; font-size: 20px; margin: 5px; } .run { text-align: center; background-color: #343a40; border-color: #343a40; color: #fff; font-weight: normal; width: fit-content; text-decoration: none; cursor: pointer; display: block; padding: .25rem 2.5rem; line-height: 1.5; border-radius: .2rem; box-sizing: border-box; font-size: 1rem; margin-bottom: 2px; font-weight: 400; user-select: none; text-transform: none; }   Run    heapsort  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37  \u0026#34;\u0026#34;\u0026#34;This method is used for heapify the array. every time when we remove a element from array.\u0026#34;\u0026#34;\u0026#34; def heapify(arr, n, i): largest = i r = 2*i + 1 l = 2*i + 2 if l \u0026lt; n and arr[i] \u0026lt; arr[l]: largest = l if r \u0026lt; n and arr[largest] \u0026lt; arr[r]: largest = r if largest != i: arr[i], arr[largest] = arr[largest], arr[i] heapify(arr, n, largest) \u0026#34;\u0026#34;\u0026#34;Actual impelementation of heap short algorithm.\u0026#34;\u0026#34;\u0026#34; def heapsort(arr): n = len(arr) for i in range(n, -1, -1): heapify(arr, n , i) print(arr) for i in range(n-1, 0, -1): arr[0], arr[i] = arr[i], arr[0] heapify(arr, i, 0) # sample input if __name__ == \u0026#34;__main__\u0026#34;: arr = [ 12, 11, 13, 5, 6, 7] heapsort(arr) print(\u0026#34;sorted array: \u0026#34;, arr)     "
},
{
	"uri": "https://docs.hackersoon.com/interviews/algorithms/sorting/mergesort/",
	"title": "Mergesort",
	"tags": [],
	"description": "",
	"content": ".caption { text-align: center; background-color: grey; color: white; font-weight: normal; text-decoration: double; } .editorqa { text-align: center; padding: 5px; color: blue; font-weight: bold; font-size: 20px; margin: 5px; } .run { text-align: center; background-color: #343a40; border-color: #343a40; color: #fff; font-weight: normal; width: fit-content; text-decoration: none; cursor: pointer; display: block; padding: .25rem 2.5rem; line-height: 1.5; border-radius: .2rem; box-sizing: border-box; font-size: 1rem; margin-bottom: 2px; font-weight: 400; user-select: none; text-transform: none; }   Run    mergesort  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61  \u0026#34;\u0026#34;\u0026#34;merge logic:This function merge two shorted arrays into one sorted array.\u0026#34;\u0026#34;\u0026#34; def merge(arr, l, m ,r): n1 = m - l +1 n2 = r - m L = [0]*n1 R = [0]*n2 for i in range(0, n1): L[i] = arr[l+i] for j in range(0, n2): R[j] = arr[m+1+j] i, j, k =(0, 0, l) while i\u0026lt;n1 and j\u0026lt;n2: if L[i]\u0026lt;=R[j]: arr[k] = L[i] i += 1 else: arr[k] = R[j] j += 1 k += 1 while i \u0026lt; n1: arr[k] = L[i] i += 1 k += 1 while j \u0026lt; n2: arr[k] = R[j] j += 1 k += 1 \u0026#34;\u0026#34;\u0026#34;Actual impelementation of merge short algorithm.\u0026#34;\u0026#34;\u0026#34; def mergesort(arr, l, r): if l \u0026lt; r: m = (l+r-1)//2 mergesort(arr, l, m) mergesort(arr, m+1, r) merge(arr, l, m, r) #sample input arr = [12, 11, 13, 5, 6, 7] n = len(arr) print(\u0026#34;Given array is: \u0026#34;, arr) mergesort(arr, 0, n - 1) print(\u0026#34;\\n\\nSorted array is: \u0026#34;, arr)     "
},
{
	"uri": "https://docs.hackersoon.com/interviews/ds/linkedlist/positionallist/",
	"title": "Positional List",
	"tags": [],
	"description": "",
	"content": ".caption { text-align: center; background-color: grey; color: white; font-weight: normal; text-decoration: double; } .editorqa { text-align: center; padding: 5px; color: blue; font-weight: bold; font-size: 20px; margin: 5px; } .run { text-align: center; background-color: #343a40; border-color: #343a40; color: #fff; font-weight: normal; width: fit-content; text-decoration: none; cursor: pointer; display: block; padding: .25rem 2.5rem; line-height: 1.5; border-radius: .2rem; box-sizing: border-box; font-size: 1rem; margin-bottom: 2px; font-weight: 400; user-select: none; text-transform: none; }   Run    Positional List  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123  class Empty(Exception): pass class _DoublyLinkedBase: class _Node: __slots__ = \u0026#39;_element\u0026#39;, \u0026#39;_prev\u0026#39;, \u0026#39;_next\u0026#39; def __init__(self, element, prev, next): self._element = element self._prev = prev self._next = next def __init__(self): self._header = self._Node(None, None, None) self._tailer = self._Node(None, None, None) self._header._next = self._tailer self._tailer._next = self._header self._size = 0 def __len__(self): self._size def isEmpty(self): return self._size == 0 def _insert_between(self, value, predecessor, successor): node = self._Node(value, predecessor, successor) predecessor._next = node successor._prev = node self._size += 1 return node def _delete_between(self, node): ans = node._element node._next._prev = node._prev node._prev._next = node._next self._size -= 1 node._element = node._prev = node._next = None return ans class PositionalList(_DoublyLinkedBase): class Position: def __init__(self, container, node): self._container = container self._node = node def element(self): return self._node._element def __eq__(self, other): return type(other) is type(self) and other._node is self._node def __ne__(self, other): return not (self == other) def _validate(self, p): if not isinstance(p, self.Position): raise TypeError(\u0026#34;p must be proper Postion type.\u0026#34;) if p._container is not self: raise ValueError(\u0026#34;P does not belongs to this container.\u0026#34;) if p._node._next is None: raise ValueError(\u0026#34;p is no longer valid.\u0026#34;) return p._node def _make_position(self, node): if node is self._header or node is self._tailer: return None else: return self.Position(self, node) def first(self): return self._make_position(self._header._next) def last(self): return self._make_position(self._tailer._prev) def before(self, p): node = self._validate(p) return self._make_position(node._prev) def after(self, p): node = self._validate(p) return self._make_position(node._next) def __iter__(self): cursor = self.first() while cursor is not None: yield cursor.element() cursor = self.after(cursor) def _insert_between(self, value, predecessor, successor): node = super()._insert_between(value, predecessor, successor) return self._make_position(node) def add_first(self, value): return self._insert_between(value, self._header, self._header._next) def add_last(self, value): return self._insert_between(value, self._tailer._prev, self._tailer) def add_befor(self, value, p): original = self._validate(p) return self._insert_between(value, original._prev, original) def add_after(self, value, p): original = self._validate(p) return self._insert_between(value, original, original._next) def _delete_between(self, p): original = self._validate(p) return self._delete_between(original) def replace(self, p , value): original = self._validate(p) ans = original._element original._element = value return ans     "
},
{
	"uri": "https://docs.hackersoon.com/interviews/ds/queue/queue_dll/",
	"title": "Queue dll",
	"tags": [],
	"description": "",
	"content": ".caption { text-align: center; background-color: grey; color: white; font-weight: normal; text-decoration: double; } .editorqa { text-align: center; padding: 5px; color: blue; font-weight: bold; font-size: 20px; margin: 5px; } .run { text-align: center; background-color: #343a40; border-color: #343a40; color: #fff; font-weight: normal; width: fit-content; text-decoration: none; cursor: pointer; display: block; padding: .25rem 2.5rem; line-height: 1.5; border-radius: .2rem; box-sizing: border-box; font-size: 1rem; margin-bottom: 2px; font-weight: 400; user-select: none; text-transform: none; }   Run    Queue dll  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74  class Empty(Exception): pass class _DoublyLinkedBase: class _Node: __slots__ = \u0026#39;_element\u0026#39;, \u0026#39;_prev\u0026#39;, \u0026#39;_next\u0026#39; def __init__(self, element, prev, next): self._element = element self._prev = prev self._next = next def __init__(self): self._header = self._Node(None, None, None) self._tailer = self._Node(None, None, None) self._header._next = self._tailer self._tailer._next = self._header self._size = 0 def __len__(self): self._size def isEmpty(self): return self._size == 0 def _insert_between(self, value, predecessor, successor): node = self._Node(value, predecessor, successor) predecessor._next = node successor._prev = node self._size += 1 return node def _delete_between(self, node): ans = node._element node._next._prev = node._prev node._prev._next = node._next self._size -= 1 node._element = node._prev = node._next = None return ans class LinkedDeque(_DoublyLinkedBase): def first(self): if self.isEmpty(): raise Empty(\u0026#34;queue is empty.\u0026#34;) return self._header._next._element def last(self): if self.isEmpty(): raise Empty(\u0026#34;queue is empty.\u0026#34;) return self._tailer._prev._element def insert_first(self, value): self._insert_between(value, self._header, self._header._next) def insert_last(self, value): self._insert_between(value, self._tailer._prev, self._tailer) def delete_first(self): if self.isEmpty(): raise Empty(\u0026#34;queue is empty.\u0026#34;) self._delete_between(self._header._next) def delete_last(self): if self.isEmpty(): raise Empty(\u0026#34;queue is empty.\u0026#34;) self._delete_between(self._tailer._prev) def __str__(self): return \u0026#39;, \u0026#39;.join([\u0026#39;{key}={value}\u0026#39;.format(key=key, value=self.__dict__.get(key)) for key in self.__dict__])     "
},
{
	"uri": "https://docs.hackersoon.com/interviews/ds/queue/queue_list/",
	"title": "Queue List",
	"tags": [],
	"description": "",
	"content": ".caption { text-align: center; background-color: grey; color: white; font-weight: normal; text-decoration: double; } .editorqa { text-align: center; padding: 5px; color: blue; font-weight: bold; font-size: 20px; margin: 5px; } .run { text-align: center; background-color: #343a40; border-color: #343a40; color: #fff; font-weight: normal; width: fit-content; text-decoration: none; cursor: pointer; display: block; padding: .25rem 2.5rem; line-height: 1.5; border-radius: .2rem; box-sizing: border-box; font-size: 1rem; margin-bottom: 2px; font-weight: 400; user-select: none; text-transform: none; }   Run    Queue List  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47  class Empty(Exception): pass class ArrayQueue: DEFAULT_CAPACITY = 10 def __init__(self): self._data = [None]*ArrayQueue.DEFAULT_CAPACITY self._front = 0 self._size = 0 def __len__(self): return self._size def isempty(self): return self._size == 0 def first(self): if self.isempty(): raise Empty(\u0026#34;queue is empty.\u0026#34;) return self._data[self._front] def enqueue(self, value): if self._size == len(self._data): self._resize(2*len(self._data)) avail = (self._front + self._size)%len(self._data) self._data[avail] = value self._size += 1 def dequeue(self): if self._size == 0: raise Empty(\u0026#34;queue is empty.\u0026#34;) ans = self._data[self._front] self._data[self._front] = None self._front = (self._front + 1)%len(self._data) self._size -= 1 return ans def _resize(self, cap): old = self._data self._data = [None]*cap walk = self._front for k in range(self._size): self._data.append(old[walk]) walk = (1+walk)%len(old) self._front = 0     "
},
{
	"uri": "https://docs.hackersoon.com/interviews/ds/queue/queue_ll/",
	"title": "Queue LL",
	"tags": [],
	"description": "",
	"content": ".caption { text-align: center; background-color: grey; color: white; font-weight: normal; text-decoration: double; } .editorqa { text-align: center; padding: 5px; color: blue; font-weight: bold; font-size: 20px; margin: 5px; } .run { text-align: center; background-color: #343a40; border-color: #343a40; color: #fff; font-weight: normal; width: fit-content; text-decoration: none; cursor: pointer; display: block; padding: .25rem 2.5rem; line-height: 1.5; border-radius: .2rem; box-sizing: border-box; font-size: 1rem; margin-bottom: 2px; font-weight: 400; user-select: none; text-transform: none; }   Run    Queue LL  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46  class Empty(Exception): pass class LinkedQueue: class _Node: __slots__ = \u0026#39;_element\u0026#39;, \u0026#39;_next\u0026#39; def __init__(self, element, next): self._element = element self._next = next def __init__(self): self._head = None self._tail = None self._size = 0 def __len__(self): return self._size def isempty(self): return self._size == 0 def first(self): if self.isempty(): raise Empty(\u0026#34;queue is empty.\u0026#34;) return self._head._element def enqueue(self, value): node = self._Node(value, self._head) if self.isempty(): self._head = node else: self._tail._next = node self._tail = node self._size += 1 def dequeue(self): if self.isempty(): raise Empty(\u0026#34;queue is empty.\u0026#34;) ans = self._head._element self._head = self._head._next self._size -= 1 if self.isempty(): self._tail = None return ans     "
},
{
	"uri": "https://docs.hackersoon.com/interviews/algorithms/sorting/quicksort/",
	"title": "Quicksort",
	"tags": [],
	"description": "",
	"content": ".caption { text-align: center; background-color: grey; color: white; font-weight: normal; text-decoration: double; } .editorqa { text-align: center; padding: 5px; color: blue; font-weight: bold; font-size: 20px; margin: 5px; } .run { text-align: center; background-color: #343a40; border-color: #343a40; color: #fff; font-weight: normal; width: fit-content; text-decoration: none; cursor: pointer; display: block; padding: .25rem 2.5rem; line-height: 1.5; border-radius: .2rem; box-sizing: border-box; font-size: 1rem; margin-bottom: 2px; font-weight: 400; user-select: none; text-transform: none; }   Run    quicksort  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34  \u0026#34;\u0026#34;\u0026#34;partition logic in quicksort.\u0026#34;\u0026#34;\u0026#34; def partition(arr, low, high): i = low -1 pivot = arr[high] for j in range(low, high): if arr[j] \u0026lt; pivot: i += 1 arr[i], arr[j] = arr[j], arr[i] arr[i+1], arr[high] = arr[high], arr[i+1] return i+1 \u0026#34;\u0026#34;\u0026#34;Actual impelementation of quick short algorithm.\u0026#34;\u0026#34;\u0026#34; def quicksort(arr, low, high): if low \u0026lt; high: p = partition(arr, low, high) quicksort(arr, low, p-1) quicksort(arr, p+1, high) # sample input arr = [10, 7, 8, 9, 1, 5] n = len(arr) quicksort(arr,0,n-1) print (\u0026#34;Sorted array is: \u0026#34;, arr)     "
},
{
	"uri": "https://docs.hackersoon.com/interviews/problemsolving/sliding_window/",
	"title": "Sliding Window",
	"tags": [],
	"description": "",
	"content": ".caption { text-align: center; background-color: grey; color: white; font-weight: normal; text-decoration: double; } .editorqa { text-align: center; padding: 5px; color: blue; font-weight: bold; font-size: 20px; margin: 5px; } .run { text-align: center; background-color: #343a40; border-color: #343a40; color: #fff; font-weight: normal; width: fit-content; text-decoration: none; cursor: pointer; display: block; padding: .25rem 2.5rem; line-height: 1.5; border-radius: .2rem; box-sizing: border-box; font-size: 1rem; margin-bottom: 2px; font-weight: 400; user-select: none; text-transform: none; }   Run    sliding window  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21  def max_sum_window_sliding(l, n, k): print(l, n, k) current_sum = 0 if n\u0026lt;k: return False for i in range(k): current_sum += l[i] print(current_sum) max_sum = current_sum for i in range(n-k): print(l[k+i],l[i]) current_sum = current_sum + l[k+i]-l[i] print(current_sum) if max_sum \u0026lt; current_sum: max_sum = current_sum return max_sum max_sum_value = max_sum_window_sliding([1, 4, 2, 10, 23, 3, 1, 0, 20], 9, 4) print(max_sum_value)     "
},
{
	"uri": "https://docs.hackersoon.com/interviews/ds/stack/stack_list/",
	"title": "Stack List",
	"tags": [],
	"description": "",
	"content": ".caption { text-align: center; background-color: grey; color: white; font-weight: normal; text-decoration: double; } .editorqa { text-align: center; padding: 5px; color: blue; font-weight: bold; font-size: 20px; margin: 5px; } .run { text-align: center; background-color: #343a40; border-color: #343a40; color: #fff; font-weight: normal; width: fit-content; text-decoration: none; cursor: pointer; display: block; padding: .25rem 2.5rem; line-height: 1.5; border-radius: .2rem; box-sizing: border-box; font-size: 1rem; margin-bottom: 2px; font-weight: 400; user-select: none; text-transform: none; }   Run    Stack List  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45  \u0026#34;\u0026#34;\u0026#34;Implementing a stack using python list.\u0026#34;\u0026#34;\u0026#34; class Empty(Exception): pass class ArrayStack: def __init__(self): self._data = [] def __len__(self): return len(self._data) def pop(self): if self.is_empty(): raise Empty(\u0026#34;Stack is empty\u0026#34;) return self._data.pop() def push(self, value): self._data.append(value) def top(self): if self.is_empty(): raise Empty(\u0026#34;Stack is empty\u0026#34;) return self._data[-1] def is_empty(self): return self.__len__() == 0 def is_matched(expr): lefty = \u0026#39;[{(\u0026#39; righty = \u0026#39;]})\u0026#39; s = ArrayStack() for c in expr: if c in lefty: s.push(c) elif c in righty: if s.is_empty(): return False if righty.index(c) != lefty.index(s.pop()): return False return s.is_empty()     "
},
{
	"uri": "https://docs.hackersoon.com/interviews/ds/stack/stack_ll/",
	"title": "Stack LL",
	"tags": [],
	"description": "",
	"content": ".caption { text-align: center; background-color: grey; color: white; font-weight: normal; text-decoration: double; } .editorqa { text-align: center; padding: 5px; color: blue; font-weight: bold; font-size: 20px; margin: 5px; } .run { text-align: center; background-color: #343a40; border-color: #343a40; color: #fff; font-weight: normal; width: fit-content; text-decoration: none; cursor: pointer; display: block; padding: .25rem 2.5rem; line-height: 1.5; border-radius: .2rem; box-sizing: border-box; font-size: 1rem; margin-bottom: 2px; font-weight: 400; user-select: none; text-transform: none; }   Run    Stack LL  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39  class Empty(Exception): pass class LinkedStack: class _Node: __slots__ = \u0026#39;_element\u0026#39;, \u0026#39;_next\u0026#39; def __init__(self, element, next): self._element = element self._next = next def __init__(self): self._head = None self._size = 0 def __len__(self): return self._size def isempty(self): return self._size == 0 def push(self, value): self._head = self._Node(value, self._head) self._size += 1 def pop(self): if self._size == 0: raise Empty(\u0026#34;stack is empty.\u0026#34;) ans = self._head._element self._head = self._head._next self._size -= 1 return ans def top(self): if self._size == 0: raise Empty(\u0026#34;stack is empty.\u0026#34;) return self._head._element     "
},
{
	"uri": "https://docs.hackersoon.com/interviews/problemsolving/trapping-rain-problem/",
	"title": "Trapping Rain Problem",
	"tags": [],
	"description": "",
	"content": ".caption { text-align: center; background-color: grey; color: white; font-weight: normal; text-decoration: double; } .editorqa { text-align: center; padding: 5px; color: blue; font-weight: bold; font-size: 20px; margin: 5px; } .run { text-align: center; background-color: #343a40; border-color: #343a40; color: #fff; font-weight: normal; width: fit-content; text-decoration: none; cursor: pointer; display: block; padding: .25rem 2.5rem; line-height: 1.5; border-radius: .2rem; box-sizing: border-box; font-size: 1rem; margin-bottom: 2px; font-weight: 400; user-select: none; text-transform: none; }   Run    Trapping Rain Problem  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32  # Python program to find maximum amount of water that can # be trapped within given set of bars. def findWater(arr, n): left = [0]*n water = 0 right = [0]*n # Fill left array left[0] = arr[0] for i in range( 1, n): left[i] = max(left[i-1], arr[i]) print(\u0026#34;Left: {}\u0026#34;.format(left)) # Fill right array right[n-1] = arr[n-1] for i in range(n-2, -1, -1): right[i] = max(right[i+1], arr[i]); print(\u0026#34;right: {}\u0026#34;.format(right)) # Calculate the accumulated water element by element # consider the amount of water on i\u0026#39;th bar, the # amount of water accumulated on this particular # bar will be equal to min(left[i], right[i]) - arr[i] . for i in range(0, n): water += min(left[i],right[i]) - arr[i] return water # Driver program arr = [0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1] n = len(arr) print(\u0026#34;Maximum water that can be accumulated is\u0026#34;,findWater(arr, n))     "
},
{
	"uri": "https://docs.hackersoon.com/",
	"title": "",
	"tags": [],
	"description": "",
	"content": "Cheat Sheet  Commands    Docker   Tumx\u0026#43;iterm   Networking   Ansible   Git   Kubernetes    Programming    Golang    Installations    Mac_setup   Consul_vault   Minikube   Docker   ElasticSearch    Databases    Mongodb    Interview Prepartion    Algorithms   Data Sturctures   Problem Solving   System Design    "
},
{
	"uri": "https://docs.hackersoon.com/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.hackersoon.com/contribution/",
	"title": "Contribution Guide",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.hackersoon.com/credits/",
	"title": "Credits",
	"tags": [],
	"description": "",
	"content": "Contributors Thanks to them for making Open Source Software a better place ! .ghContributors { display: flex; flex-flow: wrap; align-content: flex-start } .ghContributorsdiv { width: 100%; display: inline-flex; margin-bottom: 20px; } .ghContributorsdiv label { padding-left: 4px; } .ghContributorsdiv span { font-size: x-medium; padding-left: 10px; }   @agrawal-pulkit 15 commits  \nPackages and libraries  hugo learn theme shortcodes sample site  "
},
{
	"uri": "https://docs.hackersoon.com/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]